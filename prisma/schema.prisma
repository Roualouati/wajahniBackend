generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model Users {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  firstName          String
  lastName           String
  password           String
  hashedRefreshToken String?
  role               Role                @default(USER)
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  baccalaureate     Baccalaureate?
  personalityTests   PersonalityTest[] 
  recommendations    Recommendation[]
}
model Baccalaureate {
  id       Int                 @id @default(autoincrement())
  type     BaccalaureateType
  userId   Int                 @unique
  user     Users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  notePhilosophy  Float?
  noteArabic     Float?
  noteEnglish    Float?
  noteFrench     Float?
  noteSport      Float?
  noteMathematics    Float? 
  noteOptions    Float?
  options    Options?
  philosophyComment   String?
  arabicComment       String?
  englishComment     String?
  frenshComment       String?
  sportComment       String?
  mathematicsComment  String?
  optionComment      String?
  globalComment       String?
  generalAverage      Float?
  Score             Float?
  experimentalSciences ExperimentalSciencesBac?
  computerScience      ComputerScienceBac?
  literature           LiteratureBac?
  sports               SportsBac?
  economicsAndManagement EconomicsAndManagementBac?
  technical            TechnicalBac?
  mathematics          MathematicsBac?
}
enum Options {
  CHINESE
  SPANISH
  GERMAN
  DRAWING
  RUSSIAN
  MUSIC
  ITALIAN
  SCIENCE
}

model ExperimentalSciencesBac {
  id                 Int             @id @default(autoincrement())
  baccalaureateId    Int             @unique
  baccalaureate      Baccalaureate   @relation(fields: [baccalaureateId], references: [id], onDelete: Cascade)
  notePhysics       Float?  
  physicsComment      String?

  scienceNote       Float?
  informaticsNote     Float?
  scienceComment   String?
  informaticsComment String?
}
model ComputerScienceBac {
  id                 Int             @id @default(autoincrement())
  baccalaureateId    Int             @unique
  baccalaureate      Baccalaureate   @relation(fields: [baccalaureateId], references: [id], onDelete: Cascade)
notePhysics       Float?  
  physicsComment      String?
  algorithmsNote      Float?
  stiNote            Float?
  algorithmsComment   String?
  stiComment         String?
}
model LiteratureBac {
  id                 Int             @id @default(autoincrement())
  baccalaureateId    Int             @unique
  baccalaureate      Baccalaureate   @relation(fields: [baccalaureateId], references: [id], onDelete: Cascade)
  historyAndGeographyNote       Float?
 
  islamicNote      Float?
  informaticsNote     Float?
  historyAndGeographyComment    String?
  islamicComment    String?
  informaticsComment String?
  }
model SportsBac {
  id                 Int             @id @default(autoincrement())
  baccalaureateId    Int             @unique
  baccalaureate      Baccalaureate   @relation(fields: [baccalaureateId], references: [id], onDelete: Cascade)
  biologicalSciencesNote Float?
  physicalEducationNote Float?
  informaticsNote     Float?
  sportsSpecializationNote Float?
  scienceNote       Float?
  biologicalSciencesComment String?
  physicalEducationComment String?
  informaticsComment String?
  sportsSpecializationComment String?
  scienceComment    String?
  notePhysics       Float?  
  physicsComment      String?
  
  }



model EconomicsAndManagementBac {
  id                 Int             @id @default(autoincrement())
  baccalaureateId    Int             @unique
  baccalaureate      Baccalaureate   @relation(fields: [baccalaureateId], references: [id], onDelete: Cascade)

  economicsNote     Float?
  managementNote    Float?
  informaticsNote     Float?
  historyAndGeographyNote       Float?
  economicsComment  String?
  managementComment String?
  informaticsComment String?
  historyAndGeographyComment String?

}
model TechnicalBac {
  id                 Int             @id @default(autoincrement())
  baccalaureateId    Int             @unique
  baccalaureate      Baccalaureate   @relation(fields: [baccalaureateId], references: [id], onDelete: Cascade)
notePhysics       Float?  
  physicsComment      String?
  technicalNote     Float?
  informaticsNote     Float?
  technicalComment  String?
  informaticsComment String?

}
model MathematicsBac {
  id                 Int             @id @default(autoincrement())
  baccalaureateId    Int             @unique
  baccalaureate      Baccalaureate   @relation(fields: [baccalaureateId], references: [id], onDelete: Cascade)
notePhysics       Float?  
  physicsComment      String?
  informaticsNote     Float?
  scienceNote       Float?
  informaticsComment String?
  scienceComment    String?
}


// Personality Test Model
model PersonalityTest {
  id               Int                  @id @default(autoincrement())
  userId           Int
  user             Users                 @relation(fields: [userId], references: [id],onDelete: Cascade)
  startedAt        DateTime             @default(now())
  completedAt      DateTime?
  isCompleted      Boolean              @default(false)
  personalityType  String?              // Final result (e.g., "INFJ")
  personalityTypeDescription String?
  critiques        PersonalityCritique[]
  recommendations  Recommendation[]     // Added opposite relation
}


// Personality Critique Model
model PersonalityCritique {
  id               Int                  @id @default(autoincrement())
  name             String               // e.g., "Extroversion"
  description      String?
  testId           Int
  test             PersonalityTest      @relation(fields: [testId], references: [id],onDelete: Cascade)
  score            Int?                 // Calculated score for this critique
  questions        PersonalityQuestion[]
}

// Personality Question Model
model PersonalityQuestion {
  id               Int                  @id @default(autoincrement())
  text             String               // Generated by OpenAI
  options          Json                 // ["Strongly Agree", "Agree", ...] as JSON
  selectedOption   String?              // User's selected option
  position         Int                  // Order of question in test
  critiqueId       Int
  critique         PersonalityCritique  @relation(fields: [critiqueId], references: [id],onDelete: Cascade)
}


// Recommendation Model
model Recommendation {
  id               Int                  @id @default(autoincrement())
  userId           Int
  user             Users                @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalityType  String
  studyPaths       String[]             // Recommended paths (e.g., ["Medicine", "Architecture"])
  detailedAnalysis String               // AI-generated explanation
  createdAt        DateTime             @default(now())
  
  // Reference to the tests that generated this recommendation
  personalityTestId Int?
  personalityTest   PersonalityTest?    @relation(fields: [personalityTestId], references: [id])
  
}

// Enums
enum Role {
  ADMIN
  USER
}
enum BaccalaureateType {
  EXPERIMENTAL_SCIENCES
  COMPUTER_SCIENCE
  LITERATURE
  SPORTS
  ECONOMICS_AND_MANAGEMENT
  TECHNICAL
  MATHEMATICS
}

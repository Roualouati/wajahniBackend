generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model Users {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  firstName          String
  lastName           String
  password           String
  hashedRefreshToken String?
  role               Role                @default(USER)
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  personalityTests   PersonalityTest[] 
  competenceTests    CompetenceTest[] 
  recommendations    Recommendation[]
}

// Personality Test Model
model PersonalityTest {
  id               Int                  @id @default(autoincrement())
  userId           Int
  user             Users                 @relation(fields: [userId], references: [id],onDelete: Cascade)
  startedAt        DateTime             @default(now())
  completedAt      DateTime?
  isCompleted      Boolean              @default(false)
  personalityType  String?              // Final result (e.g., "INFJ")
  personalityTypeDescription String?
  critiques        PersonalityCritique[]
  recommendations  Recommendation[]     // Added opposite relation
}

// Personality Critique Model
model PersonalityCritique {
  id               Int                  @id @default(autoincrement())
  name             String               // e.g., "Extroversion"
  description      String?
  testId           Int
  test             PersonalityTest      @relation(fields: [testId], references: [id],onDelete: Cascade)
  score            Int?                 // Calculated score for this critique
  questions        PersonalityQuestion[]
}

// Personality Question Model
model PersonalityQuestion {
  id               Int                  @id @default(autoincrement())
  text             String               // Generated by OpenAI
  options          Json                 // ["Strongly Agree", "Agree", ...] as JSON
  selectedOption   String?              // User's selected option
  position         Int                  // Order of question in test
  critiqueId       Int
  critique         PersonalityCritique  @relation(fields: [critiqueId], references: [id])
}

// Competence Test Model
model CompetenceTest {
  id               Int                  @id @default(autoincrement())
  userId           Int
  user             Users                 @relation(fields: [userId], references: [id],onDelete: Cascade)
  startedAt        DateTime             @default(now())
  completedAt      DateTime?
  isCompleted      Boolean              @default(false)
  strengths        Json?                // {"Teamwork": 85, "Problem Solving": 90} as JSON
  
  categories       CompetenceCategory[]
  recommendations  Recommendation[]     // Added opposite relation
}

// Competence Category Model
model CompetenceCategory {
  id               Int                  @id @default(autoincrement())
  name             String
  description      String?
  testId           Int
  test             CompetenceTest       @relation(fields: [testId], references: [id])
  score            Int?                 // Calculated score for this category
  questions        CompetenceQuestion[]
}

// Competence Question Model
model CompetenceQuestion {
  id               Int                  @id @default(autoincrement())
  text             String               // Generated by OpenAI
  options          Json                 // [{"text": "Option A", "score": 5}, ...] as JSON
  selectedOption   Int?                 // Index of selected option
  position         Int                  // Order of question in test
  categoryId       Int
  category         CompetenceCategory   @relation(fields: [categoryId], references: [id])
}

// Recommendation Model
model Recommendation {
  id               Int                  @id @default(autoincrement())
  userId           Int
  user             Users                @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalityType  String
  strengths        Json                 // Competence strengths as JSON
  studyPaths       String[]             // Recommended paths (e.g., ["Medicine", "Architecture"])
  detailedAnalysis String               // AI-generated explanation
  createdAt        DateTime             @default(now())
  
  // Reference to the tests that generated this recommendation
  personalityTestId Int?
  personalityTest   PersonalityTest?    @relation(fields: [personalityTestId], references: [id])
  competenceTestId  Int?
  competenceTest    CompetenceTest?     @relation(fields: [competenceTestId], references: [id])
}

// Enums
enum Role {
  ADMIN
  USER
}